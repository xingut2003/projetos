from abc import ABC, abstractmethod


class Conta:
    def __init__(self, numero, usuario):
        self._numero = numero
        self._cliente = usuario
        self._saldo = 0
        self._agencia = '0001'
        self._historico = Historico()

    @property
    def saldo(self):
        return self._saldo

    @classmethod
    def nova_conta(cls, numero, usuario):
        return cls(numero, usuario)

    def saque(self, valor):

        if valor > self.saldo:
            print('\n\033[0;32m** Não autorizado. Saldo insuficiente **\033[m\n')

        elif valor > 0:
            self._saldo -= valor
            print('\n\033[0;31m>> Saque realizado com sucesso <<\033[m\n')
            return True  # and self._saldo

        else:
            print('\n\033[0;32m** Valor inválido. Tente novamente **\033[m\n')

        return False

    def deposito(self, valor):

        if valor > 0:
            self._saldo += valor
            print('\n\033[0;31m>> Depósito realizado com sucesso <<\033[m\n')

        else:
            print('\n\033[0;32m** Valor inválido. Tente novamente **\033[m\n')
            return False

        return True  # and self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico


class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite_por_saque=500, limite_de_saques_diarios=3):
        super().__init__(numero, cliente)
        self._limite_por_saque = limite_por_saque
        self._limite_de_saques_diarios = limite_de_saques_diarios

    def saque(self, valor):
        numero_saques = 0
        for transacao in self.historico.transacoes:
            if transacao['operação'] == Saque.__name__:
                if valor > self._limite_por_saque:
                    print('\n\033[0;31m**O valor ultrapassa do limite por saque de R$500.00 .\033[m\n')
                    return False
                elif numero_saques > self._limite_de_saques_diarios:
                    print('\n\033[1;31m**Você atingiu o limite de saques diários**\033[m\n')
                    return False
                else:
                    numero_saques += 1
                    return super().saque(valor) and numero_saques
            return False

    # TODO: Criando as informações dos clientes pelos atributos "numero", "cliente" e "agencia" que pertence
    # TODO: à classe "Conta(pai)" e a classe "ContaCorrente(filha).

    def __str__(self):
        dados = f'''\n
        Agência Bancária: {self._agencia}
        C/C: {self._numero}
        Titular: {self.cliente._nome}
        '''


class Usuario:
    def __init__(self, endereco):
        self._endereco = endereco
        self._contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self._contas.append(conta)


class Transacao(ABC):
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass


class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)


class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor


class PessoaFisica(Usuario):
    def __init__(self, endereco, cpf, nome, data_nascimento):
        super().__init__(endereco)
        self._cpf = cpf
        self._nome = nome
        self._data_nascimento = data_nascimento


class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                'operação': transacao.__class__.__name__,
                'valor da operação(saque/depósito)': transacao.valor,
            }
        )


def filtro_de_clientes(cpf, usuarios):
    usuarios_filtrados = []

    for usuario in usuarios:

        if usuario['CPF'] == cpf:
            usuarios_filtrados.append(usuario)

    if usuarios_filtrados:
        return usuarios_filtrados[0]

    else:
        return None

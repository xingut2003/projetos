import textwrap
from abc import ABC, abstractproperty, abstractclassmethod
from datetime import datetime
import pytz


class ContaIterador:
    def __init__(self, contas):
        self.contas = contas
        self._contador = 0

    def __iter__(self):
        return self

    def __next__(self):
        try:
            conta = self.contas[self._contador]
            return f"""\
            Agência:\t{conta.agencia}
            C/C:\t\t{conta.numero}
            Titular:\t{conta.cliente.nome}
            Saldo:\t{conta.saldo}
        """
        except IndexError:
            raise StopIteration
        finally:
            self._contador += 1


class Conta:

    def __init__(self, numero, cliente):

        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self._saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("\n\033[1;31m*** Operação falhou! Você não tem saldo suficiente. ***\033[m")


        elif valor > 0:
            self._saldo -= valor
            print("\n\033[1;32m=== Saque realizado com sucesso! ===\033[m")
            return True

        else:
            print("\n\033[1;31m*** Operação falhou! O valor informado é inválido. ***\033[m")

        return False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print("\n\033[1;32m=== Depósito realizado com sucesso! ===\033[m")
        else:
            print("\n\033[1;31m*** Operação falhou! O valor informado é inválido. ***\033[m")
            return False

        return True


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    @staticmethod
    def realizar_transacao(conta, transacao):
        if len(conta.historico.transacoes_diarias()) > 10:
            print('\033[1;31m*** Você excedeu o número limite de transações diárias! ***\033[m')
            return None

        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)


class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf


class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self._limite = limite
        self._limite_saques = limite_saques



    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__]
        )

        excedeu_limite = valor > self._limite
        excedeu_saques = numero_saques >= self._limite_saques

        if excedeu_limite:
            print("\n\033[1;31m*** Operação falhou! O valor do saque excede o limite. ***\033[m")
            return False
        elif excedeu_saques:
            print("\n\033[1;31m*** Operação falhou! Número máximo de saques excedido. ***\033[m")
            return False
        else:
            return super().sacar(valor)



    def __str__(self):
        return f"""\
            Agência:\t{self._agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}
        """


class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d / %m / %Y\n>> %H : %M"),
            }
        )

    def gerador_de_relatorios_filtrados(self, tipo_de_transacao=None):
        for transacao in self._transacoes:
            if tipo_de_transacao is None or transacao['tipo'].lower() == tipo_de_transacao.lower():
                yield transacao


    def transacoes_diarias(self):
        data_de_hoje = datetime.now(pytz.timezone('America/Sao_Paulo'))
        transacoes = []

        for transacao in self._transacoes:
            data_transacao = datetime.strptime(transacao['data'], '%d / %m / %Y\n>> %H : %M').date()


            if data_de_hoje == data_transacao:
                transacoes.append(transacao)

                return transacoes
        return transacoes

class Transacao(ABC):
    # def __init__(self, conta):
    #     self.conta = conta

    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        self.conta = Conta


class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


def log_transacao(func):
    def arquivo_transacao(*args, **kwargs):
        func(*args, **kwargs)
        if func.__name__.upper() == 'depositar':
            print(
                f'\n{datetime.now().strftime('%d / %m / %Y\n>> %H : %M')} ===> \033[0;32m{func.__name__.upper()}\033[m\n')
            return arquivo_transacao
        elif func.__name__.upper() == 'sacar':
            print(
                f'\n{datetime.now().strftime('%d / %m / %Y\n>> %H : %M')} ===> \033[0;31m{func.__name__.upper()}\033[m\n')
            return arquivo_transacao
        else:
            print(
                f'\n{datetime.now().strftime('%d / %m / %Y\n>> %H : %M')} ===> \033[0;33m{func.__name__.upper()}\033[m\n')
            return arquivo_transacao

    return arquivo_transacao


def menu():
    menu = """\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    
    => """
    return input(f'{textwrap.dedent(menu)}')

def menu_extrato():
    menu_extrato = """"\n
            [es]\tExtrato de saque
            [ed]\tExtrato de depósitos
            [ec]\tExtrato completo
            => """
    return input(f'{textwrap.dedent(menu_extrato)}')


def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None


def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("\n\033[1;31m*** Cliente não possui conta! ***\033[m")
        return

    # FIXME: não permite cliente escolher a conta
    return cliente.contas[0]


@log_transacao
def depositar(clientes):
    cpf = input("\nInforme o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n\033[1;31m*** Cliente não encontrado! ***\033[m")
        return

    valor = float(input("\nInforme o valor do depósito: "))
    transacao = Deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


@log_transacao
def sacar(clientes):
    cpf = input("\nInforme o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n\033[1;31m*** Cliente não encontrado! ***\033[m")
        return

    valor = float(input("\nInforme o valor do saque: "))
    transacao = Saque(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


@log_transacao
def exibir_extrato(clientes):
    cpf = input("\nInforme o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n\033[1;31m*** Cliente não encontrado! ***\033[m")
        return

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    print("\n================ EXTRATO ================")
    # TODO: atualizar a implementação para utilizar o gerador definido em Historico
    extrato_saque = ''
    extrato_deposito = ''
    tem_transacao = False

    for transacao in conta.historico.gerador_de_relatorios_filtrados():

        if transacao['tipo'] == 'Saque':
            extrato_saque += f'\n{transacao['data']}\tR$ {transacao['valor']}'

        elif transacao['tipo'] == 'Deposito':
            extrato_deposito += f'\n{transacao['data']}\tR$ {transacao['valor']}'


    if not tem_transacao:
        print('Não houve movimentações na conta.')

    print(f'\n\033[0;31mSaques:\033[m\n\n{extrato_saque if extrato_saque else 'Não houve saques.'}'
          f'\n\n\033[0;32mDepósitos:\033[m\n\n{extrato_deposito if extrato_deposito else 'Não houve depósitos.'} ')

    print(f"\n\n\nSaldo:\n\tR$ {round(conta.saldo, 2)}")
    print("==========================================")



@log_transacao
def criar_cliente(clientes):
    cpf = input("\nInforme o CPF (somente número): ")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("\n\033[1;31m*** Já existe cliente com esse CPF! ***\033[m")
        return

    nome = input("\nInforme o nome completo: ")
    data_nascimento = input("\nInforme a data de nascimento (dd-mm-aaaa): ")
    endereco = input("\nInforme o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    cliente = PessoaFisica(nome, data_nascimento, cpf, endereco)

    clientes.append(cliente)

    print("\n\033[1;32m=== Cliente criado com sucesso! ===\033[m")


@log_transacao
def criar_conta(numero_conta, clientes, contas):
    cpf = input("\nInforme o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\n\033[1;31m*** Cliente não encontrado, fluxo de criação de conta encerrado! ***\033[m")
        return

    conta = ContaCorrente.nova_conta(cliente, numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)

    print("\n\033[1;32m=== Conta criada com sucesso! ===\033[m")


def listar_contas(contas):
    # TODO: alterar implementação, para utilizar a classe ContaIterador

    for conta in ContaIterador(contas):
        print("=" * 100)
        print(textwrap.dedent(str(conta)))


def main():
    clientes = []
    contas = []

    while True:
        opcao = menu()



        if opcao == "d":
            depositar(clientes)

        elif opcao == "s":
            sacar(clientes)

        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "nu":
            criar_cliente(clientes)

        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            print('\n\033[0;34mObrigado por usar o nosso sistema! Volte sempre!\033[m')
            break

        else:
            print("\n\033[1;31m*** Operação inválida, por favor selecione novamente a operação desejada. ***\033[m")


main()
